export type TemplateFormat = 'f-string' | 'jinja2';

export type ParsedFStringNode =
  | { type: 'literal'; text: string }
  | { type: 'variable'; name: string };

type InputKeys<T extends string> =
  T extends `${infer B}{{${infer Var}}}${infer Rest}`
    ? InputKeys<`${B}${Var}${Rest}`>
    : T extends `${infer _}{${infer Var}}${infer Rest}`
    ? [Var, ...InputKeys<Rest>]
    : [];

export type ExtractTemplateParams<T extends string> = {
  [K in InputKeys<T>[number]]: string;
};

export const parseFString = (template: string): ParsedFStringNode[] => {
  // Core logic replicated from internals of pythons built in Formatter class.
  // https://github.com/python/cpython/blob/135ec7cefbaffd516b77362ad2b2ad1025af462e/Objects/stringlib/unicode_format.h#L700-L706
  const chars = template.split('');
  const nodes: ParsedFStringNode[] = [];

  const nextBracket = (bracket: '}' | '{' | '{}', start: number) => {
    for (let i = start; i < chars.length; i += 1) {
      if (bracket.includes(chars[i])) {
        return i;
      }
    }
    return -1;
  };

  let i = 0;
  while (i < chars.length) {
    if (chars[i] === '{' && i + 1 < chars.length && chars[i + 1] === '{') {
      nodes.push({ type: 'literal', text: '{' });
      i += 2;
    } else if (
      chars[i] === '}' &&
      i + 1 < chars.length &&
      chars[i + 1] === '}'
    ) {
      nodes.push({ type: 'literal', text: '}' });
      i += 2;
    } else if (chars[i] === '{') {
      const j = nextBracket('}', i);
      if (j < 0) {
        throw new Error("Unclosed '{' in template.");
      }

      nodes.push({
        type: 'variable',
        name: chars.slice(i + 1, j).join(''),
      });
      i = j + 1;
    } else if (chars[i] === '}') {
      throw new Error("Single '}' in template.");
    } else {
      const next = nextBracket('{}', i);
      const text = (next < 0 ? chars.slice(i) : chars.slice(i, next)).join('');
      nodes.push({ type: 'literal', text });
      i = next < 0 ? chars.length : next;
    }
  }
  return nodes;
};

export const interpolateFString = (
  template: string,
  values: ExtractTemplateParams<string>
) =>
  parseFString(template).reduce((res, node) => {
    if (node.type === 'variable') {
      if (node.name in values) {
        return res + (values as Record<string, string>)[node.name];
      }
      throw new Error(`Missing value for input ${node.name}`);
    }

    return res + node.text;
  }, '');

export const mergeOrUpdate = <O>(
  arr1: Array<O>,
  arr2: Array<O>,
  getId: (a: O) => string
): Array<O> => {
  //⚠️ Generated by copilot
  const res: Array<O> = [];
  const map = new Map<string, O>();

  arr1.forEach((o) => map.set(getId(o), o));
  arr2.forEach((o) => map.set(getId(o), o));

  map.forEach((o) => res.push(o));

  return res;
};
export const getApiKeyFromLocalStorage = () => {
  if (typeof window !== 'undefined') {
    return localStorage.getItem('OPENAI_API_KEY');
  } else return undefined;
};

export type Simplify<TType> = TType extends any[] | Date
  ? TType
  : { [K in keyof TType]: TType[K] };
